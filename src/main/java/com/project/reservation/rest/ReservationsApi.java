/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.24).
 * https://github.com/swagger-api/swagger-codegen Do not edit the class manually.
 */

package com.project.reservation.rest;

import com.project.reservation.model.ReservationDates;
import com.project.reservation.model.ReservationRequest;
import com.project.reservation.model.UpdateReservationRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import javax.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-01-09T19:06:38.954Z[GMT]")
public interface ReservationsApi {

    @Operation(summary = "Check availability", description = "Check availability", tags = {})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "")})
    @RequestMapping(value = "/reservations",
        consumes = {"application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Boolean> checkAvailability(
        @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody
            ReservationDates reservationDates);

    @Operation(summary = "Cancel reservation", description = "Cancel reservation", tags = {})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "")})
    @RequestMapping(value = "/reservations/reservation/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> cancelReservation(
        @Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("id")
            Long id);


    @Operation(summary = "Make reservation", description = "Make reservation", tags = {})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "")})
    @RequestMapping(value = "/reservations/reservation",
        consumes = {"application/json"},
        method = RequestMethod.POST)
    ResponseEntity<Long> makeReservation(
        @Parameter(in = ParameterIn.DEFAULT, description = "", schema = @Schema()) @Valid @RequestBody
            ReservationRequest body);


    @Operation(summary = "Modify reservation", description = "Modify reservation", tags = {})
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "")})
    @RequestMapping(value = "/reservations/reservation",
        method = RequestMethod.PUT)
    ResponseEntity<Void> modifyReservation(
        @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @RequestBody
            UpdateReservationRequest body);

}

